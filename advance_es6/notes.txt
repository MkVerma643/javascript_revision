--> Es 6 | 7 :- new features introduced in javascript 
  -> let keyword :- we can define local scope of a variable in a particular scope. 
    for(let i=1; i<=5 ; i++){
        console.log(i)
    }
    console.log(i);//i is not defined
    if(conditon){
        let x=10;
    }
    x;//not defined 
    let b=10;
    let b=20;//cant be redeclare 
  -> constant :- It is a value that never be changed . It is fixed and permanent 
    const API="path";
  -> template literal (backtrick symbol `` combine both string and variable)
  let a=10;
  let b=20;
  let sum=a+b;
  console.log(`The sum of ${a} and ${b} is ${sum}`);
  -> arrow function (=>) :- sort and concise code 
     function add(a,b){
         return (a+b)
     }
     let add=function(a,b){
         return (a+b)
     }
     //arrow function 
       let add=(a,b)=>(a+b);
       let add=(a,b)=>{
           return (a+b)
       }
       eg:
       let arr=[23,45,67,889,9];
       let sum=0;
       arr.forEach(val=> sum+=val);
    --> Spread operator and rest parameter 
       --> spread operator (...) :- is used to copy or spread array or object in new array or object.
          eg:
          let arr=[2,3,4,5];
          let newArr=[...arr,7,8];//2 3 4 5 7 8 
          let obj={name:'anuj',age:23};
          let newobj={...obj,name:'sumit',city:'noida'} 
            {name:'sumit',age:23,city:'noida'}
        --> rest parameter (...) :- we can pass n  number arguments in a function. Limitation is that rest parameter is the last formal parameter of the method.
        --> Task 
          Convert to do list in es 6 features 
        --> OOps features 
          oops :- object oriented programing structure
          -> reusability 
          -> ** memory management 
          -> security 
        -> Class :-class is a group of data members , member functions and its properties.
          --> constructor :- used to initilize some data when object is created.
          class Car{
            constructor(){
              this.speed=100;
            }
            acc(){
              this.speed+=50;
            }
            checkspeed(){
              console.log(`The speed is ${this.speed}`)
            }
          }
          --> getter snd setter
           class Person{
               constructor(name){
                  this._name=name;
               }
               get name(){
                   return this._name;
               }
               set name(newName){
                   this._name=newName;
               }
           }
           const obj=new Person("sumit");
           console.log(obj.name)
           obj.name="amit"
           console.log(obj.name)
          -> static methods and properties :- they directily call with class name (standalone property)
           class Person {
             constructor(name){
               this.name=name;
             }
             getName(){
               return this.name;
             }
             static xyz(gender){
               let name=gender=="male"?"sumit":"anaaya";
               return new Person(name);
             }
           }
           --> Computed property :- [] result of the expression as the property name of an object.

           let propName="c";
           const obj{
             a:1,
             b:2,
            [propName]:3
           }
          
          const handler=(event)=>{
            let {name,value}=event.target;
            setState({...state,[name]:value})
          }
         <input type="text" name="fname" onChange={handler}/>
         <input type="text" name="lname" onChange={handler}/>

         --> Inheritance :- reusability , to access the parent class properties in a child class.
           extends and super keyword are used to acheive it.
        --> Destructuring :- destructure the array or object values into a normal variable.
         eg:
           let arr=["anuj","anil","sunil"];
           let [a,b,c]=arr;
           let obj={name:"anuj",age:23};
           let {name,age}=obj;
        --> map | filter | reduce 
        -> map():- return an array with all values 
          eg:
            let arr=[2,3,4,5,6];
            let newArr=arr.map(val=> val*2);// 4 6 8 10 12 

            eg: (react js)
              let names=["anuj","anil","sunil"];
              <ul>
                {names.map(val=>
                      <li> {val} </li>
                )}
              </ul>
          -> filter() :- return an array with filter data 
          eg:
            let arr=[2,3,4,5,6,7,8];
            let newArr=arr.filter(val=> val%2==0);//2 4 6 8 
          eg:
            let obj=[
              {id:1,name:"a",salary:23456},
              {id:2,name:"b",salary:33456},
              {id:3,name:"c",salary:43456},
              {id:4,name:"d",salary:53456}
            ]
            let filterObj=obj.filter(val=> val.salary>40000);
          -> reduce :- return a single value with the given array to perfome the calculations.
         let obj=[
              {id:1,name:"a",salary:23456},
              {id:2,name:"b",salary:33456},
              {id:3,name:"c",salary:43456},
              {id:4,name:"d",salary:53456}
            ]
            let totalSalary=obj.reduce((sum,val)=> {
                console.log(sum+"---"+val.salary)
                return sum+val.salary
            } ,0);
            console.log(totalSalary);
          --> Modules :- module is a filter where we put our common functionalities and we use them anywhere in the application 
             import | export 
          -> 
            Callback :- are used to deal with asynchronous operations.When we nest many callback functions , the code will be more difficult to maintain.
            eg:
              function getUser(userId,callback){
               setTimeout(()=>{
                  callback({
                      userId:userId,
                      username:'sumit'
                  })
               },2000)
            }
            function getServices(user,callback){
                setTimeout(()=>{
                   callback(['email','sms','vpn'])
                },2000)
            }
            function getServiceCost(services,callback){
                setTimeout(()=>{
                  callback(services.length*200);
                },3000)
            }
            getUser(101,(user)=>{
                getServices(user,(services)=>{
                    getServiceCost(services,(cost)=>{
                        console.log('The service cost is '+cost)
                    })
                })
            })
            --> If we have a multiple callback functions then we have callback issue.
          Es6 introduce the promises that allow us to write asynchronous code in more manageable ways.
        --> promise :- used to handle asynchronous operations.
           -> A promise object has 3 states 
              -> Pending :- when promise start it goes to pending state 
              -> Fulfilled with a value 
              -> Rejected for a reason 
             syntex:
          const promise=new Promise((resolve,reject)=>{
            let age=24;
             if(age>=18){
               setTimeout(()=>{
                 resolve("Elligible")
               },2000)
             }
             else {
               reject("Not Elligible")
             }
          })
          -> Consuming a Promise ( then , catch)
            -> then() method :- used to get the value of a promise when it is Fulfilled.
            promise.then(res=>{
              console.log(res)
            })
            ->catch() :- used to get a error or rejected value 
             promise.then(res=>{
              console.log(res)
            })
            .catch(err=>{
              console.log(err)
            })
          -> Promise Chaining 
          if we want to execute 2 or more related asynchronous operations , where the next operation starts with the result from the previous step then we use promise chain.
          eg:

          --> fetch() :- inbuild nethod of javascript for consuming apis and return promise 
            https://jsonplaceholder.typicode.com/
            https://jsonplaceholder.typicode.com/posts

            const APIURL="https://jsonplaceholder.typicode.com/posts";
            fetch(APIURL)
            .then(res=> res.json())
            .then(data=>{
              console.log(data)
            })
            -> Assignment 
            consume all 6 apis of jsonplaceholder and render the data in the DOM.
          -> async await:- 
             aysnc keyword :- if we put async before any of the function then it return promise
    async function abc(){
              return "hello";
          }
          -> await :- to wait for a Promise to settle either in resolved or rejected state.
          -> await used only in a async function 
          async function display(){
            let result=await abc();
            console.log(result);
          }
      -> Json Server :- It provide us rest apis behalf of the json data 
        -> npm install json-server --g 
        --> server 
           products.json 
           {
             "products":[
               {"id":1,"pname":"A","price":23456,"quantity":3},
               {"id":2,"pname":"B","price":33456,"quantity":4},
               {"id":3,"pname":"C","price":43456,"quantity":5}
             ]
           }
           -> open folder in cmd 
           json-server --watch products.json --port 3001
          --> With the help of Json server , create a crud app in javascript ,with asyc await approach ?
          
      "id": 1,
      "pname": "A",
      "price": 23456,
      "quantity": 3
 







